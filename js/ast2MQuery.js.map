{"version":3,"sources":["/projects/nodejs/botbuilder/abot_stringdist/src/../src/ast2MQuery.ts"],"names":[],"mappings":"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","file":"ast2MQuery.js","sourcesContent":["'use strict'\n\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\n\nimport * as mongoose from 'mongoose';\n//import * as m2s from './model2schema.js';\n\nimport { ErBase as ErBase, Sentence as Sentence, IFErBase as IFErBase } from 'abot_erbase';\n\nimport * as debug from 'debug';\n\nimport * as Model from 'fdevsta_monmove';\n\nconst debuglog = debug('ast2MQuery');\n\nimport * as chevrotain from 'chevrotain';\nimport * as AST from './ast';\n\nimport { ASTNodeType as NT} from './ast';\n\nimport * as Sentenceparser from './sentenceparser';\n\nvar createToken = chevrotain.createToken;\nvar Lexer = chevrotain.Lexer;\nvar Parser = chevrotain.Parser;\n\nexport interface IFilter {\n  cat : string,\n  value : string\n};\n\n/* construct a mongo query from an AST */\n\nexport function makeMongoDistinctGroup(cols : string[]) : any {\n  var res = { $group : { _id : {} } };\n  cols.forEach(col => {\n    res.$group[col] = '$' + col;\n    res.$group._id[col]  = '$' + col;\n  });\n  return res;\n}\n\nexport function getCategoryForNodePair(nodeCat : AST.ASTNode, nodeFact : AST.ASTNode , sentence: IFErBase.ISentence) {\n  var startIndex = nodeCat && nodeCat.bearer && nodeCat.bearer.startOffset;\n  debug('StartIndex : ' + startIndex);\n  debug('StartIndex : ' + JSON.stringify(nodeCat,undefined,2));\n  if (typeof startIndex === \"number\" && (startIndex >= 0) ) {\n    return sentence[startIndex].matchedString;\n  }\n  if(!nodeCat || nodeCat.children.length === 0 || nodeCat.bearer === undefined) {\n    var factIndex = nodeFact.bearer.startOffset;\n    debug(JSON.stringify(sentence[factIndex], undefined, 2));\n    return sentence[factIndex].category;\n  }\n};\n\nexport function getCategoryForNode(nodeCat : AST.ASTNode, sentence: IFErBase.ISentence) {\n  var startIndex = nodeCat && nodeCat.bearer && nodeCat.bearer.startOffset;\n  if (nodeCat.type !== NT.CAT) {\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(nodeCat.type).toString()}`);\n  }\n  if (startIndex !== undefined && (startIndex >= 0) ) {\n    return sentence[startIndex].matchedString;\n  }\n  throw new Error(' no startindex' + JSON.stringify(nodeCat));\n};\nexport function getFactForNode(nodeFact : AST.ASTNode , sentence: IFErBase.ISentence) {\n  var factIndex = nodeFact.bearer.startOffset;\n    //console.log(JSON.stringify(sentence[factIndex], undefined, 2));\n  return sentence[factIndex].matchedString; //.category;\n};\n\nexport function makeMongoName(s : string) : string {\n  return s.replace(/[^a-zA-Z0-9]/g,'_');\n}\n\n\nexport function makeMongoMatchFromAst(node : AST.ASTNode, sentence : IFErBase.ISentence, theModel: Model.IFModel.IModels) {\n  debug(AST.astToText(node));\n  //console.log(\"making mongo match \" + AST.astToText(node));\n  if(!node) {\n    return { $match : { }};\n  }\n  if(node.type !== NT.LIST) {\n    throw new Error('expected different nodetype ' + node.type );\n  }\n  var res = {};\n  node.children.forEach(n => {\n    var cat = getCategoryForNodePair(n.children[0], n.children[1], sentence);\n    cat = makeMongoName(cat);\n    var fact = getFactForNode(n.children[1], sentence);\n    if (n.type === NT.OPEqIn) {\n      res[cat] = fact;\n    } else if( n.type === NT.OPStartsWith) {\n         res[cat] = { $regex : new RegExp(`^${fact.toLowerCase()}`,\"i\") };\n    } else if( n.type === NT.OPEndsWith) {\n        res[cat] = { $regex : new RegExp(`${fact.toLowerCase()}$`,\"i\") };\n    }\n    else if( n.type === NT.OPContains) {\n        res[cat] = { $regex : new RegExp(`${fact.toLowerCase()}`,\"i\") };\n    }\n    else {\n      throw new Error('Expected nodetype NT.OPEqIn but was ' + n.type);\n    }\n  });\nreturn { $match : res};\n}\n\n\n\nexport function makeMongoGroupFromAst(node : AST.ASTNode, sentence : IFErBase.ISentence, theModel: Model.IFModel.IModels) {\n  debug(AST.astToText(node));\n  if(node.type !== NT.LIST) {\n    throw new Error('expected different nodetype ' + node.type );\n  }\n  var res = {};\n  node.children.forEach(n => {\n    if (n.type === NT.CAT) {\n      var cat = getCategoryForNode(n, sentence);\n      cat = makeMongoName(cat);\n      res[cat] = '$' + cat;\n     } else {\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(n.type).toString()}`);\n    }\n  });\n  var r1 = { $group: Object.assign({ _id: Object.assign({}, res)}, {}) };\n  var firstX = {};\n  Object.keys(res).forEach(key => { firstX[key] = { $first: '$' + key }});\n  r1.$group = Object.assign(r1.$group,firstX);\n  return r1;\n}\n\nexport function makeMongoColumnsFromAst(node : AST.ASTNode, sentence : IFErBase.ISentence, theModel: Model.IFModel.IModels)\n: { columns: string[], reverseMap :{ [key: string] : string }} {\n  debug(AST.astToText(node));\n  if(node.type !== NT.LIST) {\n    throw new Error('expected different nodetype ' + node.type );\n  }\n  var res = { columns : [],\n              reverseMap : {} };\n  node.children.forEach(n => {\n    if (n.type === NT.CAT) {\n      var cat = getCategoryForNode(n, sentence);\n      res.columns.push(cat);\n      var catmongo = makeMongoName(cat);\n      if( cat !== catmongo) {\n        res.reverseMap[catmongo] = cat;\n      }\n     } else {\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(n.type).toString()}`);\n    }\n  });\n  return res;\n}\n\n\n\n\nexport function makeMongoProjectionFromAst(node : AST.ASTNode, sentence : IFErBase.ISentence, theModel: Model.IFModel.IModels) {\n  debug(AST.astToText(node));\n  if(node.type !== NT.LIST) {\n    throw new Error('expected different nodetype ' + node.type );\n  }\n  var res = { _id : 0 };\n  node.children.forEach(n => {\n    if (n.type === NT.CAT) {\n      var cat = getCategoryForNode(n, sentence);\n      cat = makeMongoName(cat);\n      res[cat] = 1;\n     } else {\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(n.type).toString()}`);\n    }\n  });\n  return { $project : res};\n}\n\n\nexport function makeMongoMatchF(filters: IFilter[]) {\n  var res = { $match : {}};\n  //console.log('is match \\n');\n  filters.forEach(filter => {\n    res.$match[ filter.cat ] = filter.value;\n  });\n  return res;\n}\n\nexport function makeMongoProjection(cols : string[]) : any {\n  var res = { $project : { _id : 0 } };\n  cols.forEach(col => {\n    res.$project[col] = 1;\n  });\n  return res;\n}\n\nexport function makeMongoQuery(filters : IFilter[], resultcolumns : string[]) : any {\n  var filter = makeMongoMatchF(filters);\n  var group = makeMongoDistinctGroup(resultcolumns);\n  var projection = makeMongoProjection(resultcolumns);\n  return [filter,group,projection];\n\n}\n\n\n"],"sourceRoot":"ABC"}